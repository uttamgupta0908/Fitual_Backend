enum Difficulty {
  beginner
  intermediate
  advanced
}

enum WeightUnit {
  kg
  lbs
}

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  name      String
  email     String    @unique
  password  String
  workouts  Workout[]

  createdAt DateTime  @default(now())
}

model Exercise {
  id            Int               @id @default(autoincrement())
  name          String
  muscleGroup   String
  equipment     String
  difficulty    Difficulty
  description   String
  videoUrl      String
  imageUrl      String

  workoutEntries WorkoutExercise[]
}
model Workout {
  id         Int               @id @default(autoincrement())
  userId     Int
  date       DateTime          @default(now())
  duration   Int               // seconds
  exercises  WorkoutExercise[]

  createdAt  DateTime          @default(now())

  user       User              @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model WorkoutExercise {
  id         Int        @id @default(autoincrement())
  workoutId  Int
  exerciseId Int

  // ðŸ‘‡ one WorkoutExercise has many Set rows
  sets       Set[]

  workout    Workout    @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  exercise   Exercise   @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
}

model Set {
  id         Int        @id @default(autoincrement())
  workoutExerciseId Int
  reps       Int
  weight     Float?     @default(0)
  weightUnit WeightUnit

  workoutExercise WorkoutExercise @relation(fields: [workoutExerciseId], references: [id], onDelete: Cascade)
}

// model Workout {
//   id         Int               @id @default(autoincrement())
//   userId     Int
//   date       DateTime          @default(now())
//   duration   Int               // seconds
//   exercises  WorkoutExercise[]

//   createdAt  DateTime          @default(now())

//   user       User              @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

// model WorkoutExercise {
//   id         Int        @id @default(autoincrement())
//   workoutId  Int
//   exerciseId Int
//   sets       Int        @default(0)
//   reps       Int        @default(0)
//   weight     Float?     @default(0)
//   weightUnit WeightUnit

//   workout    Workout    @relation(fields: [workoutId], references: [id], onDelete: Cascade)
//   exercise   Exercise   @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
// }
